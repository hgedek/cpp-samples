cmake_minimum_required(VERSION 3.10)
set(CMAKE_C_COMPILER /usr/bin/gcc)
set(CMAKE_CXX_COMPILER /usr/bin/g++)

project(cpp_samples)

set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++2a")


set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

add_executable(address_of address_of.cpp)
add_executable(aliasing_with_template aliasing_with_template.cpp)
add_executable(array_type array_type.cpp)
add_executable(variadic_template_indexing variadic_template_indexing.cpp)
add_executable(checked_deletor checked_deletor.cpp)
add_executable(compile_time_next_prev compile_time_next_prev.cpp)
add_executable(constexpr constexpr.cpp)
add_executable(construct construct.cpp)
add_executable(ctor_exception ctor_exception.cpp)
add_executable(mutable_lambda mutable_lambda.cpp)
add_executable(derived_virtual derived_virtual.cpp)
add_executable(explicit_deduction explicit_deduction.cpp)
add_executable(folding folding.cpp)
add_executable(friend friend.cpp)
add_executable(from_to from_to.cpp)
add_executable(full_template_specialization full_template_specialization.cpp)
add_executable(function_template_friendship function_template_friendship.cpp)
add_executable(function_traits function_traits.cpp)
add_executable(pass_return_same_type pass_return_same_type.cpp)
add_executable(lambda_unary lambda_unary.cpp)
add_executable(lower_bound lower_upper_bound.cpp)
add_executable(mapping mapping.cpp)
add_executable(memcpy memcpy.cpp)
add_executable(metafunction metafunction.cpp)
add_executable(noncopyable noncopyable.cpp)
add_executable(nvi nvi.cpp)
add_executable(operator_new operator_new.cpp)
add_executable(overload overload.cpp)
add_executable(overwrite_memory_block overwrite_memory_block.cpp)
add_executable(pointer pointer.cpp)
add_executable(ref_to_pointer ref_to_pointer.cpp)
add_executable(policy_based_programming policy_based_programming.cpp)
add_executable(shortest_path_nodes shortest_path_nodes.cpp)
add_executable(sizeof sizeof....cpp)
add_executable(skipws skipws.cpp)
add_executable(static_friend static_friend.cpp)
add_executable(static_template static_template.cpp)
add_executable(has_method has_method.cpp)
add_executable(coercion_ctor coercion_ctor.cpp)
add_executable(template_enum template_enum.cpp)
add_executable(template_fibonacci template_fibonacci.cpp)
add_executable(template_forward_decl template_forward_decl.cpp)
add_executable(template_inheritance template_inheritance.cpp)
add_executable(template_specialization template_specialization.cpp)
add_executable(threading threading.cpp)
add_executable(time time.cpp)
add_executable(tokenizer tokenizer.cpp)
add_executable(union union.cpp)
add_executable(upper_lower_bound upper_lower_bound.cpp)
add_executable(template_in_template template_in_template.cpp)
add_executable(variadic_bool variadic_bool.cpp)
add_executable(variant variant.cpp)
add_executable(template_void_default template_void_default.cpp)
add_executable(decltype decltype.cpp)
add_executable(reference_examples reference_examples.cpp)
add_executable(forwarding forwarding.cpp)
add_executable(mtor_mop mtor_mop.cpp)
add_executable(enum enum.cpp)
add_executable(anonymous_struct_union anonymous_struct_union.cpp)
add_executable(using_decleration using_decleration.cpp)
add_executable(algorithms algorithms.cpp)
add_executable(optional optional.cpp)
add_executable(any any.cpp)
add_executable(swap_exchange swap_exchange.cpp)
add_executable(memory memory.cpp)
add_executable(template_variable template_variable.cpp)
add_executable(c_variadics c_variadics.cpp)
add_executable(file_reader file_reader.cpp)
add_executable(regex_samples regex_samples.cpp)
add_executable(usable_c_functions usable_c_functions.cpp)
add_executable(casting_operators casting_operators.cpp)
add_executable(atomics atomics.cpp)
add_executable(template_bounded_array template_bounded_array.cpp)
add_executable(span span.cpp)
add_executable(multiple_inheritance multiple_inheritance.cpp)
add_executable(concepts concepts.cpp)

target_link_libraries(threading PRIVATE Threads::Threads)
target_link_libraries(atomics PRIVATE Threads::Threads)
